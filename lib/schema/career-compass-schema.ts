import { z } from 'zod';

const LinkSchema = z.object({
  platform: z.string().describe("Name of the platform (e.g., LinkedIn, Glassdoor, Payscale)"),
  searchQuery: z.string().describe("The search query text used or suggested"),
  url: z.string().describe("Direct URL to the search results or resource")
});

const ProfessionalResourceLinkSchema = z.object({
  title: z.string().describe("Title of the resource"),
  description: z.string().describe("Brief description of how this resource helps"),
  link: z.string().describe("URL to the helpful resource")
});

const SkillDevelopmentResourceSchema = z.object({
  title: z.string().describe("Title of the course, certification, tutorial, or book"),
  description: z.string().describe("Brief description of the resource content"),
  duration: z.string().describe("Estimated time commitment (e.g., '6h 30m', '80h 0m', '20h 0m')"),
  link: z.string().describe("URL to access the resource")
});

const MostImpactfulProjectSchema = z.object({
  title: z.string().describe("Name or title of the most significant project"),
  description: z.string().describe("Brief description of the project's goals and the candidate's role"),
  impact: z.string().describe("Measurable outcomes, metrics achieved, or ROI generated by the project"),
  relevance: z.string().describe("How this project relates to the candidate's career goals or target roles"),
  technologies: z.array(z.string()).describe("Key technologies, tools, or methodologies used in this project")
});

// --- Schema for the Resume Improvement Section (Optional within the main schema) ---
const ResumeImprovementSchema = z.object({
  overallAssessment: z.string().describe("Assessment of resume completeness/effectiveness"),
  missingElements: z.array(z.string()).describe("Critical information missing from resume"),
  formattingIssues: z.array(z.string()).describe("Layout, organization, or presentation issues"),
  contentWeaknesses: z.array(z.string()).describe("Areas where resume content lacks impact"),
  actionableSteps: z.array(z.string()).describe("Specific steps to improve the resume"),
  professionalResourceLinks: z.array(ProfessionalResourceLinkSchema).optional()
    .describe("Links to helpful resume writing resources")
}).describe("Optional section with recommendations for resume improvement");


// --- Main Candidate Analysis Schema (Represents the full structure) ---
export const CandidateAnalysisSchema = z.object({
  candidateProfile: z.object({
    coreCompetencies: z.object({
      technicalSkills: z.array(z.string()).describe("List of key technical skills, tools, and methodologies"),
      softSkills: z.array(z.string()).describe("List of important soft skills"),
      mostUsedSkill: z.array(z.string()).min(3).max(4).describe("Top 3-4 prominent skills"),
      uniqueValueProposition: z.string().describe("Statement of candidate's distinct value"),
      certifications: z.array(z.string()).optional().describe("List of relevant certifications, with dates if available")
    }).describe("Candidate's core skills and value proposition"),

    workExperience: z.object({
      totalProfessionalTenure: z.string().describe("Summary of professional experience duration"),
      seniorityLevel: z.string().describe("Assessed seniority level"), // Consider z.enum
      industryTransferPotential: z.array(z.string()).describe("Industries where skills are transferable"),
      keyAccomplishments: z.array(z.string()).describe("Major achievements from work history"),
      projectManagementExperience: z.string().optional().describe("Description of project management experience"),
      teamSizeManaged: z.string().optional().describe("Indication of team management/leadership experience"),
      mostImpactfulProject: MostImpactfulProjectSchema.optional().describe("Details of the most significant project"),
      remoteWorkExperience: z.string().optional().describe("Experience with remote/distributed teams"),
      internationalExperience: z.string().optional().describe("Global/international work experience")
    }).describe("Candidate's work history and experiences"),

    education: z.object({
      highestDegree: z.string().describe("Highest level of education attained"),
      relevantCoursework: z.array(z.string()).optional().describe("Relevant academic courses"),
      academicAchievements: z.array(z.string()).optional().describe("Notable academic accomplishments"),
      degreeUtilization: z.array(z.string()).optional().describe("Potential career applications of degree"),
      certificationOpportunities: z.array(z.string()).optional().describe("Suggested certifications based on skills"),
      continuingEducation: z.array(z.string()).optional().describe("Recent or ongoing learning activities"),
      emergingTechAlignment: z.array(z.string()).optional().describe("Relevant emerging technologies")
    }).describe("Candidate's educational background"),

    careerProgression: z.object({
      growthTrajectory: z.string().describe("Analysis of career advancement speed/direction"),
      promotionHistory: z.string().describe("Pattern of advancement in previous roles"),
      gapAnalysis: z.array(z.string()).optional().describe("Skill or experience gaps for desired roles"),
      transitionReadiness: z.string().optional().describe("Assessment of readiness for career change")
    }).describe("Analysis of career path and future potential")
  }).describe("Comprehensive candidate profile"),

  jobRecommendations: z.array(
    z.object({
      roleTitle: z.string().describe("Recommended job title"),
      experienceLevel: z.string().describe("Target experience level"), // Consider z.enum
      industryFocus: z.string().describe("Primary industry for the role"),
      workplaceType: z.string().describe("Typical workplace setting"), // Consider z.enum
      assessment: z.object({
        skillsMatch: z.array(z.string()).describe("Candidate skills matching the role"),
        skillGaps: z.array(z.string()).describe("Required skills the candidate may lack"),
        experienceMatch: z.string().describe("Alignment of work experience"),
        educationMatch: z.string().describe("Relevance of education"),
        cultureFit: z.string().describe("Potential alignment with typical role/industry culture")
      }).describe("Candidate fit assessment for the role"),
      salaryBenchmarks: z.object({
        description: z.string().default("For more accurate salary estimates, consider using the following resources:"),
        links: z.array(LinkSchema).describe("Links to salary comparison sites")
      }).describe("Salary research resources"),
      growthPotential: z.object({
        marketDemand: z.string().describe("Expected job growth rate/demand"),
        upwardMobility: z.string().describe("Potential for promotion")
      }).describe("Career growth outlook"),
      currentOpportunities: z.array(LinkSchema)
        .length(4, "Must provide links for exactly 4 job platforms")
        .describe("Links to job postings on 4 platforms"),
      skillDevelopment: z.array(SkillDevelopmentResourceSchema)
        .length(4, "Must provide exactly 4 diverse skill development resources")
        .describe("4 curated resources for skill enhancement"),
      careerPathProjections: z.object({
        potentialPaths: z.array(z.string()).describe("Possible future career trajectories"),
        requiredSteps: z.array(z.string()).describe("Steps needed for advancement"),
        timelineEstimate: z.string().describe("Estimated time to reach next level")
      }).describe("Future career path projections"),
      randomForestInsights: z.string().describe("Come up with an explanation of how the model arrived at this recommendation"),
      workLifeBalance: z.string().describe("Typical work-life balance for the role")
    }).describe("Detailed job recommendation")
  ).min(3).max(7).describe("List of 3 to 7 detailed job recommendations"),

  overallEvaluation: z.object({
    jobFitScores: z.object({
      jobTitle: z.string().describe("Title of the job"),
      score: z.number().describe("Fit score for the job"),
    }).array().describe("Fit scores for each recommended job"),
    marketPositioning: z.object({
      competitiveAdvantages: z.array(z.string()).optional().describe("Candidate's strongest market advantages"),
      improvementAreas: z.array(z.string()).optional().describe("Areas for development to improve marketability")
    }).optional().describe("Candidate's market standing analysis"),
    interviewReadiness: z.object({
      commonQuestions: z.array(z.string()).optional().describe("Likely interview questions"),
      suggestedTalkingPoints: z.array(z.string()).optional().describe("Key experiences/skills to highlight")
    }).optional().describe("Interview preparation guidance"),
    personalBrandingSuggestions: z.array(z.string()).optional().describe("Tips for strengthening professional presence")
  }).describe("Overall summary, market position, and interview prep"),

  // Resume improvement is optional within the main analysis structure
  resumeImprovement: ResumeImprovementSchema

}).describe("Comprehensive analysis of a candidate profile, job recommendations, and evaluations.");